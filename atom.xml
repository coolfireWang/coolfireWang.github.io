<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demain&#39;s Page</title>
  <subtitle>身体和心灵必须有一个在路上！</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://coolfireWang.github.io/"/>
  <updated>2016-12-08T06:46:10.000Z</updated>
  <id>http://coolfireWang.github.io/</id>
  
  <author>
    <name>Demain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端功能测试学习01</title>
    <link href="http://coolfireWang.github.io/2016/12/08/front-end-tests.html"/>
    <id>http://coolfireWang.github.io/2016/12/08/front-end-tests.html</id>
    <published>2016-12-08T06:46:10.000Z</published>
    <updated>2016-12-08T06:46:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端工程测试"><a href="#前端工程测试" class="headerlink" title="前端工程测试"></a>前端工程测试</h1><h2 id="为什么写测试"><a href="#为什么写测试" class="headerlink" title="为什么写测试?"></a>为什么写测试?</h2><ul>
<li>Web应用越来越复杂，意味着更可能出错。测试是提高代码质量、 降低错误的最好方法之一。<ul>
<li>测试可以确保得到预期结果。</li>
<li>加快开发速度。</li>
<li>方便维护。</li>
<li>提供用法的文档。</li>
</ul>
</li>
<li>对于长期维护的项目，测试会大大加快开发速度，减轻维护难度。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端工程测试&quot;&gt;&lt;a href=&quot;#前端工程测试&quot; class=&quot;headerlink&quot; title=&quot;前端工程测试&quot;&gt;&lt;/a&gt;前端工程测试&lt;/h1&gt;&lt;h2 id=&quot;为什么写测试&quot;&gt;&lt;a href=&quot;#为什么写测试&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="test" scheme="http://coolfireWang.github.io/categories/test/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="test" scheme="http://coolfireWang.github.io/tags/test/"/>
    
      <category term="mocha" scheme="http://coolfireWang.github.io/tags/mocha/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript的MVX模式</title>
    <link href="http://coolfireWang.github.io/2016/12/08/mvx.html"/>
    <id>http://coolfireWang.github.io/2016/12/08/mvx.html</id>
    <published>2016-12-08T06:08:11.000Z</published>
    <updated>2016-12-08T06:08:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="mvx" scheme="http://coolfireWang.github.io/tags/mvx/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 垃圾回收</title>
    <link href="http://coolfireWang.github.io/2016/12/08/gc.html"/>
    <id>http://coolfireWang.github.io/2016/12/08/gc.html</id>
    <published>2016-12-08T06:05:17.000Z</published>
    <updated>2016-12-08T06:05:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器js垃圾回收机制"><a href="#浏览器js垃圾回收机制" class="headerlink" title="浏览器js垃圾回收机制"></a>浏览器js垃圾回收机制</h1><h2 id="一、垃圾回收机制—GC-Garbage-Collecation"><a href="#一、垃圾回收机制—GC-Garbage-Collecation" class="headerlink" title="一、垃圾回收机制—GC:(Garbage Collecation)"></a>一、垃圾回收机制—GC:(Garbage Collecation)</h2><p> Javascript具有自动垃圾回收机制(GC:Garbage Collecation)，也就是说，执行环境会负责管理代码执行过程中使用的内存。<br> 原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p>
<p> JavaScript垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，<br> 因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p>
<p> 不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。<br> 局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，<br> 然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p>
<h2 id="二-垃圾回收的方式"><a href="#二-垃圾回收的方式" class="headerlink" title="二,垃圾回收的方式"></a>二,垃圾回收的方式</h2><ul>
<li><p>标记清除</p>
</li>
<li><p>引用计数</p>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2></li>
<li><p>什么时候出发垃圾回收</p>
</li>
<li><p>合理的gc方案</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器js垃圾回收机制&quot;&gt;&lt;a href=&quot;#浏览器js垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;浏览器js垃圾回收机制&quot;&gt;&lt;/a&gt;浏览器js垃圾回收机制&lt;/h1&gt;&lt;h2 id=&quot;一、垃圾回收机制—GC-Garbage-Collecati
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="垃圾回收" scheme="http://coolfireWang.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端工程师该具备怎样的技能呢</title>
    <link href="http://coolfireWang.github.io/2016/11/29/front-end.html"/>
    <id>http://coolfireWang.github.io/2016/11/29/front-end.html</id>
    <published>2016-11-29T05:38:08.000Z</published>
    <updated>2016-11-29T05:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个合格的前端工程师应该具备怎样的能力？"><a href="#一个合格的前端工程师应该具备怎样的能力？" class="headerlink" title="一个合格的前端工程师应该具备怎样的能力？"></a>一个合格的前端工程师应该具备怎样的能力？</h2><p> 首先你要知道什么是前端。<br> 前端工程师的英文名为front-end engineer，简称FE<br> 前端都干些什么呢？无非是三大块：html / css / js，但如果就这样，那前端也不过如此，<br> 现在意义上的前端（并非只制作网页）<br> 2011年之前，FE的工作基本都是由服务端工程师包办的，或者是由设计师来产出HTML页面。</p>
<h3 id="用户体验的把控者"><a href="#用户体验的把控者" class="headerlink" title="用户体验的把控者"></a>用户体验的把控者</h3><p> 前端工程师的主要的工作就是开发用户界面，在web系统中，就是指网页了。为什么网页需要专门的FE来写呢？答案就是为了「用户体验」。<br> 从web2.0概念的普及到web3.0的提出，用户成为互联网的主要生产者，网页所承载的功能愈加丰富多样。<br> <br><br> 首先是企业的需求：如果你的网站、app等界面做的很丑的话，我相信大众是不能接受的开发者也作为第一个使用者估计都看不过去。<br> 其次是用户的需求：现在的用户也都很挑剔。毕竟他们使用的产品各个都要么炫酷要么清爽，都被惯坏了，你的产品稍有点不爽的地方，“影响我心情不爽给你个差评”，要么就直接卸载这样你的用户就这么流失了，你的产品的价值就没了。<br> 想做出漂亮的界面你必须熟练布局](html css （h5 、css3），主流的布局风格，UI框架,响应式，浏览器兼容等<br> 随着HTML5的支持度越来越高，前端拥有的能力也会越强。比如利用canvas能够获取到图片上的每一个像素点，这样前端就拥有了图像处理能力。有了FileReader API，前端拥有了本地文件的读取能力，本地数据库，还有地理位置获取等等</p>
<h3 id="用户习惯的引导者"><a href="#用户习惯的引导者" class="headerlink" title="用户习惯的引导者"></a>用户习惯的引导者</h3><p> 用户界面的设计，操作方式，交互习惯等都由你的逻辑代码来控制，所以作为FE你不仅要写出漂亮的界面，还要编写程序去处理控制业务逻辑<br> 以前呢，用户端就是个IE浏览器，没有什么业务逻辑可言。但现在不同了，用户使用浏览器发表文章、进行社交活动，更复杂的能使用在线工具完成工作等。<br> javascript就是FE需要掌握的编程语言，他应该通晓这门语言的优势和缺点，掌握各种编程思想、开发模式。利用各种技巧实现交互越来越丰富的界面，<br> 同时还要与服务端的工程师沟通，调试接口，完成：页面展示——响应用户操作——提交用户数据——反馈操作结果这一系列流程</p>
<h4 id="有图有真相先看一张技能图"><a href="#有图有真相先看一张技能图" class="headerlink" title="有图有真相先看一张技能图"></a>有图有真相先看一张技能图</h4><p><img src="/images/fetecnl.jpg" alt="Alt text" title="Optional title"></p>
<p><strong>以上属于个人观点和看法</strong></p>
<h2 id="推荐一些前端大牛博客"><a href="#推荐一些前端大牛博客" class="headerlink" title="推荐一些前端大牛博客"></a>推荐一些前端大牛博客</h2><p>####一些前端大牛的博客地址，排名不分先后。。。<br><a href="http://evanyou.me/" target="_blank" rel="external">尤小右</a><br><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="external">阮一峰</a><br><a href="http://www.zhangxinxu.com/" target="_blank" rel="external">张鑫旭</a><br><a href="http://sentsin.com/" target="_blank" rel="external">贤心</a><br><a href="http://yuguo.us/" target="_blank" rel="external">余果</a><br><a href="http://jiongks.name/" target="_blank" rel="external">囧克斯（勾三股四）</a><br><a href="http://ideazhao.com/" target="_blank" rel="external">灵感</a><br><a href="http://www.doyoe.com/" target="_blank" rel="external">杜瑶（飘零雾雨）</a><br><a href="http://www.cnblogs.com/jikey/" target="_blank" rel="external">豪情</a><br><a href="http://blog.f2er.net/" target="_blank" rel="external">情封</a><br><a href="http://www.barretlee.com/" target="_blank" rel="external">小胡子哥</a><br><a href="http://luopq.com/" target="_blank" rel="external">狼狼的蓝胖子</a><br><a href="http://www.w3cplus.com/" target="_blank" rel="external">大漠</a><br><a href="http://yanhaijing.com/" target="_blank" rel="external">颜海镜</a><br><a href="https://xuexb.com/" target="_blank" rel="external">前端小武</a><br><a href="http://yujiangshui.com/" target="_blank" rel="external">于江水</a><br><a href="http://www.cnblogs.com/tugenhua0707/" target="_blank" rel="external">空智</a><br><a href="http://www.dang-jian.com/" target="_blank" rel="external">党建</a><br><a href="http://tiye.me/" target="_blank" rel="external">题叶</a><br><a href="http://www.cnblogs.com/TomXu/" target="_blank" rel="external">汤姆大叔</a><br><a href="http://www.cnblogs.com/rubylouvre/" target="_blank" rel="external">司徒正美</a><br><a href="https://github.com/dwqs/blog" target="_blank" rel="external">淡忘~浅思</a><br><a href="http://www.fefork.com/" target="_blank" rel="external">聂微东</a><br><a href="http://tostring.site/" target="_blank" rel="external">前端-小强</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个合格的前端工程师应该具备怎样的能力？&quot;&gt;&lt;a href=&quot;#一个合格的前端工程师应该具备怎样的能力？&quot; class=&quot;headerlink&quot; title=&quot;一个合格的前端工程师应该具备怎样的能力？&quot;&gt;&lt;/a&gt;一个合格的前端工程师应该具备怎样的能力？&lt;/h2&gt;&lt;
    
    </summary>
    
    
      <category term="随想" scheme="http://coolfireWang.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>rem 自适应方案</title>
    <link href="http://coolfireWang.github.io/2016/11/29/rem.html"/>
    <id>http://coolfireWang.github.io/2016/11/29/rem.html</id>
    <published>2016-11-28T16:08:05.000Z</published>
    <updated>2016-11-28T16:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器尺寸单位介绍"><a href="#浏览器尺寸单位介绍" class="headerlink" title="浏览器尺寸单位介绍"></a>浏览器尺寸单位介绍</h2><ul>
<li>px</li>
<li>em</li>
<li>pt</li>
<li>rem</li>
<li>pc</li>
<li>in</li>
<li>ex</li>
<li>mm</li>
<li>cm<h3 id="什么是rem"><a href="#什么是rem" class="headerlink" title="什么是rem"></a>什么是rem</h3></li>
<li>rem（font size of the root element）就是一个css 的单位 ，是指相对于根元素的字体大小的单位。简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。<h3 id="why-web-app-使用-rem"><a href="#why-web-app-使用-rem" class="headerlink" title="why web app 使用 rem"></a>why web app 使用 rem</h3></li>
<li>why强调web app，web page就不能使用rem吗，其实也当然可以，不过出于兼容性的考虑在web app下使用更加能突显这个单位的价值和能力，接下来我们来看看目前一些企业的web app是怎么做屏幕适配的。 </li>
</ul>
<ul>
<li>实现强大的屏幕适配布局：</li>
</ul>
<blockquote>
<p>现在的手机屏幕尺寸各式各样，移动端的屏幕种类更愈加混乱，之前web app有一种做法是以320宽度为标准去做适配，超过320的大小还是以320的规格去展示。</p>
<p>我们现在在切页面布局的使用常用的单位是px，这是一个绝对单位，web app的屏幕适配有很多中做法，例如：流式布局、限死宽度，还有就是通过响应式来做，但是这些方案都不是最佳的解决方法。</p>
<p>例如流式布局的解决方案有不少弊端，它虽然可以让各种屏幕都适配，但是显示的效果极其的不好，因为只有几个尺寸的手机能够完美的显示出视觉设计师和交互最想要的效果，但是目前行业里用流式布局切web app的公司还是挺多的</p>
<p>他们在页面布局的时候都是通过百分比来定义宽度，但是高度大都是用px来固定住，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度还是和原来一样，实际显示非常的不协调，这就是流式布局的最致命的缺点，往往只有几个尺寸的手机下看到的效果是令人满意的，其实很多视觉设计师应该无法接受这种效果，因为他们的设计图在大屏幕手机下看到的效果相当于是被横向拉长来一样。<br>流式布局并不是最理想的实现方式，通过大量的百分比布局，会经常出现许多兼容性的问题，还有就是对设计有很多的限制，因为他们在设计之初就需要考虑流式布局对元素造成的影响，只能设计横向拉伸的元素布局，设计的时候存在很多局限性。</p>
</blockquote>
<ul>
<li><p>固定宽度做法</p>
</li>
<li><p>设置viewport进行缩放</p>
</li>
<li><p>rem能够等比例适配所有屏幕  </p>
</li>
</ul>
<blockquote>
<p>rem 作为一个低调的长度单位，由于手机端网页的兴起，在屏幕适配中得到重用。使用 rem 前端开发者可以很方便的在各种屏幕尺寸下，通过等比缩放的方式达到设计图要求的效果。<br>  以设计稿的宽度为640px，即：designWidth = 640，同时设定在640px屏宽下 1rem=100px ，即：rem2px = 100。<br>  设置 1rem=100px 的优点不言而喻。前端开发者在切图、重构页面的时候，通过直接位移小数点的方式，就可以将UI图中测量到的 px 值换算成对应的 rem 值，方便快捷。<br>  此外，在 head 中我们还设置了：<br>  <figure class="highlight plain"><figcaption><span>name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0"</span><a href="/>">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure></p>
<p>viewport 的作用很重要，但不是本文的重点所以不展开，有兴趣的同学可以自行搜索。</p>
</blockquote>
<ul>
<li><p>先来看看具体方案：</p>
<blockquote>
<p>下面四个方案来自同事共享，原理都是采用等比缩放的方式 —— 获得目标屏幕宽度和设计稿宽度的比，作为 rem 的基值（缩放系数），设置为html标签的字体大小。不同的只是在于性能取舍和书写习惯。</p>
</blockquote>
</li>
<li><p>方案1</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">320px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">50px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">360px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">56.25px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">375px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">58.59375px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">400px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">62.5px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">414px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">64.6875px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">440px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">68.75px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">480px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">75px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">520px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">81.25px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">560px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">87.5px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">600px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">93.75px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">640px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">100px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">680px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">106.25px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">720px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">112.5px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">760px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">118.75px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">800px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">125px</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">960px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">150px</span>;&#125;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>方案2</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">320px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">312.5%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">360px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">351.5625%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">375px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">366.211%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">400px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">390.625%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">414px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">404.2969%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">440px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">429.6875%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">480px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">468.75%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">520px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">507.8125%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">560px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">546.875%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">600px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">585.9375%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">640px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">625%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">680px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">664.0625%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">720px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">703.125%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">760px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">742.1875%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">800px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">781.25%</span>;&#125;&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">960px</span>) &#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">937.5%</span>;&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>方案3</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> designWidth = <span class="number">640</span>, rem2px = <span class="number">100</span>;</div><div class="line"><span class="built_in">document</span>.documentElement.style.fontSize = </div><div class="line">  ((<span class="built_in">window</span>.innerWidth / designWidth) * rem2px) + <span class="string">'px'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>方案4</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> designWidth = <span class="number">640</span>, rem2px = <span class="number">100</span>;</div><div class="line"><span class="built_in">document</span>.documentElement.style.fontSize = </div><div class="line">  ((((<span class="built_in">window</span>.innerWidth / designWidth) * rem2px) / <span class="number">16</span>) * <span class="number">100</span>) + <span class="string">'%'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p> 为了更避免理解上的混乱，我在上面js的代码中加了 ( ) ，实际代码中是不需要的。<br>  详细分析一下，rem 和 px 直接的转换公式可以写为：</p>
<p>1rem = 1 * htmlFontSize</p>
</blockquote>
<ul>
<li>htmlFontSize 为 html 元素的字体大小。</li>
<li>首先来看方案1中，在屏宽为640px情况下的设置：</li>
<li><p>@media screen and (min-width: 640px) {html{font-size:100px;}}</p>
</li>
<li><p>可以很明显的表现出这一点 1rem = 1 * 100px ，同我们最初的设定。那么我们要得到其它屏幕大小的 htmlFontSize 值要怎么办。很简单如方案3，因为我们的采用等比缩放的方式适配，所以计算目标屏幕宽度和设计稿的宽度的比即可：</p>
</li>
<li><p>window.innerWidth / designWidth * rem2px + ‘px’</p>
</li>
<li><p>由于浏览器默认字体大小为 16px，所以当我们使用百分比作为根节点 html 的字体大小时，即html元素的font-size值设置为一个百分比值，rem 的计算方式就会改为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">  defaultFontSize = 16px</div><div class="line">  1rem = 1 * htmlFontSize * defaultFontSize</div><div class="line">  </div><div class="line">  如方案2中，在屏宽为640px情况下的设置：</div><div class="line">  </div><div class="line">  @media screen and (min-width: 640px) &#123;html&#123;font-size:625%;&#125;&#125;</div><div class="line">  </div><div class="line">  应用上面的公式：</div><div class="line">  </div><div class="line">  1rem = 1 * 625% * 16px</div><div class="line">  其中：625% * 16 = 6.25 * 16 = 100</div><div class="line">  所以：1rem = 1 * 100px</div><div class="line"> ``` </div><div class="line">-<span class="ruby">  同样的可以得到所有屏幕大小下，html 的 font-size 值的计算公式，即为方案<span class="number">4</span>：</span></div><div class="line">  </div><div class="line">-<span class="ruby">  window.innerWidth / designWidth * rem2px / <span class="number">16</span> * <span class="number">100</span>  + <span class="string">'%'</span></span></div><div class="line">  </div><div class="line">-<span class="ruby">  通过方案<span class="number">3</span>和方案<span class="number">4</span>的公式，就可以很方便的生成方案<span class="number">1</span>和方案<span class="number">2</span>中的css。</span></div><div class="line">  </div><div class="line">-<span class="ruby">  这里只给出了方案<span class="number">3</span>和方案<span class="number">4</span>对应验证页面（方案<span class="number">1</span>和方案<span class="number">2</span>是它们的变形）: scheme3.html（<span class="symbol">http:</span>/<span class="regexp">/htmlpreview.github.io/</span>?<span class="symbol">https:</span>/<span class="regexp">/github.com/hbxeagle</span><span class="regexp">/rem/blob</span><span class="regexp">/master/scheme</span>3.html）, scheme4.html（<span class="symbol">http:</span>/<span class="regexp">/htmlpreview.github.io/</span>?<span class="symbol">https:</span>/<span class="regexp">/github.com/hbxeagle</span><span class="regexp">/rem/blob</span><span class="regexp">/master/scheme</span>4.html）</span></div><div class="line">  </div><div class="line">-<span class="ruby">  如下面两张图，是在屏宽为<span class="number">360</span>px下的效果，通过计算目标为：<span class="number">1</span>rem = <span class="number">56.25</span>px。方案<span class="number">3</span>设置值为：<span class="number">56.25</span>px，方案<span class="number">4</span>设置值为：<span class="number">351.5625</span>%</span></div><div class="line">  </div><div class="line">  </div><div class="line">-<span class="ruby">  到目前为止貌似很完美的解决了问题，实际情况当然是出现了意外。在有些 Android 手机上，浏览器或 webview 的默认字体是随着系统设置的字体改变的。这样就会导致默认字体大于或小于 <span class="number">16</span>px。</span></div><div class="line">-<span class="ruby">  修改默认字体大小后，我们再看方案<span class="number">3</span>和方案<span class="number">4</span>。</span></div><div class="line">  </div><div class="line">-<span class="ruby">  同样在屏宽为<span class="number">360</span>px下，我们调大系统字体大小，如下面的效果</span></div><div class="line">  </div><div class="line">-<span class="ruby">  设置前 html 元素的字体大小的计算值为 <span class="number">18</span>px ，设置后的计算值为 <span class="number">65</span>px ，由于屏幕宽度没有改变，我们的目标值，即我们在 html 元素上设置的 font-size 值也没有变化任然为 <span class="number">56.25</span>px，而最终计算值出现了偏差。</span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">-<span class="ruby">  分析偏差前，先来看在<span class="number">360</span>px屏宽下，方案<span class="number">3</span>和方案<span class="number">4</span>的计算过程：</span></div><div class="line">  </div><div class="line">  方案3：</div><div class="line">  ```html</div><div class="line">  document.documentElement.style.fontSize = 56.25px</div><div class="line">  htmlFontSize = 56.25px</div><div class="line">  1rem = 1 * htmlFontSize = 56.25px</div><div class="line">  实际为：</div><div class="line">  1rem = 64.6875px</div></pre></td></tr></table></figure>
<p>方案4：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">document.documentElement.style.fontSize = 351.5625%</div><div class="line">htmlFontSize = 351.5625%</div><div class="line">defaultFontSize = 18px</div><div class="line">1rem = 1 * htmlFontSize * defaultFontSize = 351.5625% * 18px = 63.28125px</div><div class="line">351.5625% * 18 = 63.28125</div><div class="line">实际为：</div><div class="line">1rem = 64.6875px</div></pre></td></tr></table></figure>
<p>貌似方案4的计算结果很接近实际效果，而方案3偏差很大。再来比较方案3和方案4的计算公式：</p>
</li>
<li><p>// 方案3</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document.documentElement.style.fontSize = </div><div class="line">  window.innerWidth / designWidth * rem2px + 'px';</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>// 方案4</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document.documentElement.style.fontSize = </div><div class="line">  window.innerWidth / designWidth * rem2px / 16 * 100 + '%';</div></pre></td></tr></table></figure>
<p>  方案4较于方案3其实多除了一个16，可以推测浏览器在计算 rem 的具体值时，如果 html 设置的 font-size 为 px 值时会先除以 16 ，然后再乘以 htmlFontSize。</p>
<blockquote>
<p>1rem = 1 <em> (56.25px / 16) </em> 18<br>  1 <em> (56.25 / 16) </em> 18 = 63.28125</p>
</blockquote>
<ul>
<li>方案4存在问题，是因为系统的默认字体改为了 18px ，但是我们在计算百分比是时候，还是以 16px 为基准值进行计算，所以出现偏差（计算值和实际值之间还有一点偏差这个在后面会提到）。</li>
<li><p>而在方案3中，我们其实是不考虑浏览器默认字体大小的，但在实际使用的过程中，浏览器还是除了 16 ，而此时默认字体大小为 18px。得出如下在 html 的 fontSize 设置为 px 的情况下 rem 的计算公式为：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span><span class="comment">rem = 1 * (htmlFontSize / 16) * defaultFontSize</span></div></pre></td></tr></table></figure>
</li>
<li><p>在系统设置的字体大小发生改变时，defaultFontSize 会跟着改变，而 16 不会变化。所以方案3虽然表面上不考虑默认字体大小的变化，只关注屏幕与设计稿之间的宽度比，但在实际计算中还是使用到了默认字体大小，而且还有一个不变的 16 在作祟，导致方案3失败。</p>
</li>
<li><p>所谓的「root element」其实不是想象的那样，一个是16，一个是18，到底取的是那个 root element 的字体大小。</p>
</li>
<li><p>ok，rem 的计算的时候，px 的方式会有一个16不随系统字体大小改变，所以我们采用百分比的方案，绕开这个问题。</p>
</li>
<li><p>采用百分比的方案4因为在计算时写死了默认字体大小 16px。所以它的偏差在于没能动态的获取默认字体大小。更新如下：</p>
</li>
<li><p>方案4.1</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> designWidth = <span class="number">640</span>, rem2px = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> h = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> htmlFontSize = <span class="built_in">parseFloat</span>(<span class="built_in">window</span>.getComputedStyle(h, <span class="literal">null</span>)</div><div class="line">                                    .getPropertyValue(<span class="string">'font-size'</span>));</div><div class="line"> </div><div class="line"><span class="built_in">document</span>.documentElement.style.fontSize = </div><div class="line">  <span class="built_in">window</span>.innerWidth / designWidth * rem2px / htmlFontSize * <span class="number">100</span> + <span class="string">'%'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>效果如下图：</p>
</li>
<li><p>16px 的图中，设置后的 html 的 font-size 与 1rem 的实际值有偏差，同时 6.4rem 的计算值也有偏差。通过查看代码发现html的font-size使用的是： getPropertyValue(‘font-size’) 而 1rem 使用的是getPropertyValue(‘width’)，偏差出在计算 font-size 的时候浏览器进行了四舍五入。rem 定义中的另一个元素「font size」也不能按字面意思使用，宣告失守。</p>
</li>
<li><p>18px 中的偏差，以及上文中方案4在 18px 实际值和计算值出现的偏差都是同样的问题。所以基准值还需要修改。</p>
</li>
</ul>
<ul>
<li><p>在更新一版，方案4.2：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> designWidth = <span class="number">640</span>, rem2px = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> d = <span class="built_in">window</span>.<span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">d.style.width = <span class="string">'1rem'</span>;</div><div class="line">d.style.display = <span class="string">"none"</span>;</div><div class="line"><span class="keyword">var</span> head = <span class="built_in">window</span>.<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">head.appendChild(d);</div><div class="line"><span class="keyword">var</span> defaultFontSize = parseFloat(<span class="built_in">window</span>.getComputedStyle(d, <span class="keyword">null</span>).getPropertyValue(<span class="string">'width'</span>));</div><div class="line">d.remove();</div><div class="line"><span class="built_in">document</span>.documentElement.style.fontSize = </div><div class="line">  <span class="built_in">window</span>.innerWidth / designWidth * rem2px / defaultFontSize * <span class="number">100</span> + <span class="string">'%'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>效果如下图：</p>
</li>
</ul>
<ul>
<li><p>到此为止，rem 在默认字体不是 16px 的情况下的处理已经解决，考虑到还有设计屏幕旋转，最终手机端的解决方案为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">adapt</span>(<span class="params">designWidth, rem2px</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> d = <span class="built_in">window</span>.document.createElement(<span class="string">'div'</span>);</div><div class="line">  d.style.width = <span class="string">'1rem'</span>;</div><div class="line">  d.style.display = <span class="string">"none"</span>;</div><div class="line">  <span class="keyword">var</span> head = <span class="built_in">window</span>.document.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">  head.appendChild(d);</div><div class="line">  <span class="keyword">var</span> defaultFontSize = <span class="built_in">parseFloat</span>(<span class="built_in">window</span>.getComputedStyle(d, <span class="literal">null</span>).getPropertyValue(<span class="string">'width'</span>));</div><div class="line">  d.remove();</div><div class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = <span class="built_in">window</span>.innerWidth / designWidth * rem2px / defaultFontSize * <span class="number">100</span> + <span class="string">'%'</span>;</div><div class="line">  <span class="keyword">var</span> st = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</div><div class="line">  <span class="keyword">var</span> portrait = <span class="string">"@media screen and (min-width: "</span>+<span class="built_in">window</span>.innerWidth+<span class="string">"px) &#123;html&#123;font-size:"</span>+ ((<span class="built_in">window</span>.innerWidth/(designWidth/rem2px)/defaultFontSize)*<span class="number">100</span>) +<span class="string">"%;&#125;&#125;"</span>;</div><div class="line">  <span class="keyword">var</span> landscape = <span class="string">"@media screen and (min-width: "</span>+<span class="built_in">window</span>.innerHeight+<span class="string">"px) &#123;html&#123;font-size:"</span>+ ((<span class="built_in">window</span>.innerHeight/(designWidth/rem2px)/defaultFontSize)*<span class="number">100</span>) +<span class="string">"%;&#125;&#125;"</span></div><div class="line">  st.innerHTML = portrait + landscape;</div><div class="line">  head.appendChild(st);</div><div class="line">  <span class="keyword">return</span> defaultFontSize</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> defaultFontSize = adapt(<span class="number">640</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>回过头来再看 rem 的定义，『The font size of the root element.』。我们以为的 root element —— html 其实还有个影子在作祟，而我们以为的 font-size 其实是个近似值。      </p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器尺寸单位介绍&quot;&gt;&lt;a href=&quot;#浏览器尺寸单位介绍&quot; class=&quot;headerlink&quot; title=&quot;浏览器尺寸单位介绍&quot;&gt;&lt;/a&gt;浏览器尺寸单位介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;px&lt;/li&gt;
&lt;li&gt;em&lt;/li&gt;
&lt;li&gt;pt&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="mobileWeb开发经验总结系列" scheme="http://coolfireWang.github.io/categories/mobileWeb%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="mobile" scheme="http://coolfireWang.github.io/tags/mobile/"/>
    
      <category term="rem" scheme="http://coolfireWang.github.io/tags/rem/"/>
    
      <category term="自适应" scheme="http://coolfireWang.github.io/tags/%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>aria_hidden</title>
    <link href="http://coolfireWang.github.io/2016/11/22/aria-hidden.html"/>
    <id>http://coolfireWang.github.io/2016/11/22/aria-hidden.html</id>
    <published>2016-11-22T10:46:47.000Z</published>
    <updated>2016-11-22T10:46:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aria-hidden"><a href="#aria-hidden" class="headerlink" title="aria-hidden"></a>aria-hidden</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">图标的可访问性</div><div class="line">现代的辅助技术能够识别并朗读由 CSS 生成的内容和特定的 Unicode 字符。</div><div class="line">为了避免 屏幕识读设备抓取非故意的和可能产生混淆的输出内容</div><div class="line">（尤其是当图标纯粹作为装饰用途时），我们为这些图标设置了 aria-hidden=<span class="string">"true"</span> 属性。</div><div class="line">如果你使用图标是为了表达某些含义（不仅仅是为了装饰用），</div><div class="line">请确保你所要表达的意思能够通过被辅助设备识别，例如，包含额外的内容并通过 </div><div class="line"><span class="selector-class">.sr-only</span> 类让其在视觉上表现出隐藏的效果。</div><div class="line">如果你所创建的组件不包含任何文本内容（例如， &lt;button&gt; 内只包含了一个图标），</div><div class="line">你应当提供其他的内容来表示这个控件的意图，这样就能让使用辅助设备的用户知道其作用了。</div><div class="line">这种情况下，你可以为控件添加 aria-<span class="selector-tag">label</span> 属相。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;aria-hidden&quot;&gt;&lt;a href=&quot;#aria-hidden&quot; class=&quot;headerlink&quot; title=&quot;aria-hidden&quot;&gt;&lt;/a&gt;aria-hidden&lt;/h1&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;tab
    
    </summary>
    
    
      <category term="css3" scheme="http://coolfireWang.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>webapp设计规范</title>
    <link href="http://coolfireWang.github.io/2016/11/18/webappDesignSpecifications.html"/>
    <id>http://coolfireWang.github.io/2016/11/18/webappDesignSpecifications.html</id>
    <published>2016-11-18T07:14:05.000Z</published>
    <updated>2016-11-18T07:14:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webapp-规范"><a href="#webapp-规范" class="headerlink" title="webapp 规范"></a>webapp 规范</h1><ul>
<li>设计尺寸：640*1039</li>
<li><p>内容区域安全尺寸 640*832</p>
<blockquote>
<p>在iphone6上会被等比例放大1.17倍，画面会有一点点虚，但为了平衡文件大小和移动端适配问题，<br>目前做的App都采用这个尺寸<br>有图片必须有进行过压缩<br>考虑适度的有损压缩，如转化为80%质量的jpg图片<br>考虑把大图切成多张小图，常见在banner图过大的场景</p>
</blockquote>
</li>
<li><p>开发尺寸问题：对于全平台的APP设计，我们通常以Android720<em>1280px的标准来做设计方案，然而web app的开发中并不能直接用720</em>1280px这样的尺寸进行搭建。</p>
</li>
<li><p>原因如下：</p>
<blockquote>
<p>设备像素和CSS像素一般使用px作为单位，并且在桌面浏览器的100%缩放情况下，<br>css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，<br>那就是css中的像素就是设备的物理像素。但实际情况却并非如此，<br>css像素只是一个抽象的单位，在不同的设备或不同的环境中，<br>css中的1px所代表的设备物理像素的长度是不同的。在为桌面浏览器设计的网页中，<br>我们无需对这个津津计较，但在移动设备上，必须弄明白这点。即：</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">css中的<span class="number">1</span>px并不是总代表设备像素上的<span class="number">1</span>px，尤其是在移动设备上。</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p> 这也就是为什么不能直接拿720<em>1280px作为开发尺寸的原因！因为我们的720x1280是物理像素，而web app使用的是逻辑像素；<br>   因此，我们的设计尺寸720</em>1280px对应到开发中的代码尺寸应该为340<em>640px,对应的iPhone6（750</em>1334）的开发尺寸为375<em>667px,iPhone6p(1080</em>1920px)……</p>
</blockquote>
<h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><ul>
<li>使用无衬线字体</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, STHeiTi, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>iOS 4.0+ 使用英文字体 Helvetica Neue，之前的iOS版本降级使用 Helvetica。中文字体设置为华文黑体STHeiTi。 需补充说明，华文黑体并不存在iOS的字体库中(<a href="http://support.apple.com/kb/HT5878)，" target="_blank" rel="external">http://support.apple.com/kb/HT5878)，</a> 但系统会自动将华文黑体 STHeiTi 兼容命中系统默认中文字体黑体-简或黑体-繁。<br>    Heiti SC Light 黑体-简 细体 （iOS 7后废弃）<br>    Heiti SC Medium 黑体-简 中黑<br>    Heiti TC Light 黑体-繁 细体<br>    Heiti TC Medium 黑体-繁 中黑<br>    原生Android下中文字体与英文字体都选择默认的无衬线字体。<br>    4.0 之前版本英文字体原生 Android 使用的是 Droid Sans，中文字体原生 Android 会命中 Droid Sans Fallback<br>    4.0 之后中英文字体都会使用原生 Android 新的 Roboto 字体<br>    其他第三方 Android 系统也一致选择默认的无衬线字体。</p>
</blockquote>
<p><img src="http://www.25xt.com/wp-content/uploads/2015/03/webAPP-前端性能优化规范.png" alt="Alt text" title="前端性能优化规范"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;webapp-规范&quot;&gt;&lt;a href=&quot;#webapp-规范&quot; class=&quot;headerlink&quot; title=&quot;webapp 规范&quot;&gt;&lt;/a&gt;webapp 规范&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设计尺寸：640*1039&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内容区域安全尺寸 6
    
    </summary>
    
      <category term="webapp" scheme="http://coolfireWang.github.io/categories/webapp/"/>
    
    
      <category term="webapp" scheme="http://coolfireWang.github.io/tags/webapp/"/>
    
      <category term="规范" scheme="http://coolfireWang.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>webapp重构日志</title>
    <link href="http://coolfireWang.github.io/2016/11/18/webappReView.html"/>
    <id>http://coolfireWang.github.io/2016/11/18/webappReView.html</id>
    <published>2016-11-18T07:11:37.000Z</published>
    <updated>2016-11-18T07:11:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-app的性能瓶颈"><a href="#Web-app的性能瓶颈" class="headerlink" title="Web app的性能瓶颈"></a>Web app的性能瓶颈</h2><ul>
<li><p>代码执行效率</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>dom的解析渲染</div><div class="line"><span class="number">2.</span>代码的质量</div><div class="line"><span class="number">3.</span>浏览器</div></pre></td></tr></table></figure>
</li>
<li><p>服务器效率</p>
</li>
<li>网络带宽及其他因素</li>
</ul>
<hr>
<h2 id="webapp-重构之首页优化"><a href="#webapp-重构之首页优化" class="headerlink" title="webapp 重构之首页优化"></a>webapp 重构之首页优化</h2><hr>
<h2 id="webapp-重构之定位优化"><a href="#webapp-重构之定位优化" class="headerlink" title="webapp 重构之定位优化"></a>webapp 重构之定位优化</h2><hr>
<h2 id="webapp-重构之微信认证问题"><a href="#webapp-重构之微信认证问题" class="headerlink" title="webapp 重构之微信认证问题"></a>webapp 重构之微信认证问题</h2><hr>
<h2 id="webapp-重构之架构"><a href="#webapp-重构之架构" class="headerlink" title="webapp 重构之架构"></a>webapp 重构之架构</h2><hr>
<h2 id="webapp-重构之遇到的问题及解决方案"><a href="#webapp-重构之遇到的问题及解决方案" class="headerlink" title="webapp 重构之遇到的问题及解决方案"></a>webapp 重构之遇到的问题及解决方案</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web-app的性能瓶颈&quot;&gt;&lt;a href=&quot;#Web-app的性能瓶颈&quot; class=&quot;headerlink&quot; title=&quot;Web app的性能瓶颈&quot;&gt;&lt;/a&gt;Web app的性能瓶颈&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;代码执行效率&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
      <category term="webapp" scheme="http://coolfireWang.github.io/categories/webapp/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="webapp" scheme="http://coolfireWang.github.io/tags/webapp/"/>
    
      <category term="重构" scheme="http://coolfireWang.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之数组和对象</title>
    <link href="http://coolfireWang.github.io/2016/11/17/arrayObj.html"/>
    <id>http://coolfireWang.github.io/2016/11/17/arrayObj.html</id>
    <published>2016-11-17T01:40:05.000Z</published>
    <updated>2016-11-17T01:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组-array"><a href="#数组-array" class="headerlink" title="数组(array)"></a>数组(array)</h1><h1 id="对象（object）"><a href="#对象（object）" class="headerlink" title="对象（object）"></a>对象（object）</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组-array&quot;&gt;&lt;a href=&quot;#数组-array&quot; class=&quot;headerlink&quot; title=&quot;数组(array)&quot;&gt;&lt;/a&gt;数组(array)&lt;/h1&gt;&lt;h1 id=&quot;对象（object）&quot;&gt;&lt;a href=&quot;#对象（object）&quot; class
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 跨域</title>
    <link href="http://coolfireWang.github.io/2016/11/17/cross-domain.html"/>
    <id>http://coolfireWang.github.io/2016/11/17/cross-domain.html</id>
    <published>2016-11-17T01:40:05.000Z</published>
    <updated>2016-11-17T01:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是跨域请求"><a href="#什么是跨域请求" class="headerlink" title="什么是跨域请求"></a>什么是跨域请求</h3><blockquote>
<p>大家都知道浏览器的同源策略（不知道的请移步<a href="https://www.google.com.hk/" target="_blank" rel="external">google</a> ,<a href="https://www.baidu.com" target="_blank" rel="external">baidu</a>  ;<br>  为了防范跨域脚本（C）的攻击SRF，禁止客户端脚本（e.g javascript）对不同域的服务进行跨站调用。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是跨域请求&quot;&gt;&lt;a href=&quot;#什么是跨域请求&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域请求&quot;&gt;&lt;/a&gt;什么是跨域请求&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;大家都知道浏览器的同源策略（不知道的请移步&lt;a href=&quot;https:/
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="跨域" scheme="http://coolfireWang.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习系列01</title>
    <link href="http://coolfireWang.github.io/2016/11/07/aboutVue.html"/>
    <id>http://coolfireWang.github.io/2016/11/07/aboutVue.html</id>
    <published>2016-11-07T02:41:10.000Z</published>
    <updated>2016-11-07T02:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what’s-the-Vue-js"><a href="#what’s-the-Vue-js" class="headerlink" title="what’s the Vue.js"></a>what’s the Vue.js</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;what’s-the-Vue-js&quot;&gt;&lt;a href=&quot;#what’s-the-Vue-js&quot; class=&quot;headerlink&quot; title=&quot;what’s the Vue.js&quot;&gt;&lt;/a&gt;what’s the Vue.js&lt;/h2&gt;
    
    </summary>
    
      <category term="vue学习系列" scheme="http://coolfireWang.github.io/categories/vue%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://coolfireWang.github.io/tags/vue/"/>
    
      <category term="mvvm" scheme="http://coolfireWang.github.io/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 作用域&amp;作用域链</title>
    <link href="http://coolfireWang.github.io/2016/10/25/actionScope.html"/>
    <id>http://coolfireWang.github.io/2016/10/25/actionScope.html</id>
    <published>2016-10-25T12:40:28.000Z</published>
    <updated>2016-10-25T12:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h2 id="javascript作用域"><a href="#javascript作用域" class="headerlink" title="javascript作用域"></a>javascript作用域</h2><p>作用域是JavaScript最重要的概念之一，想要学好JavaScript就需要理解JavaScript作用域和作用域链的工作原理。<br>作用域是啥呢：作用域就是变量与函数的可访问范围，作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p>
<ol>
<li>全局作用域（Global Scope）</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;javascript作用域&quot;&gt;&lt;a href=&quot;#javascript作用域&quot; class=&quot;headerlink&quot; title=&quot;javascript作用域&quot;&gt;&lt;/a&gt;javascript作用域&lt;/h2&gt;&lt;p&gt;作用域是JavaScrip
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="作用域&amp;作用域链" scheme="http://coolfireWang.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>认识nodejs</title>
    <link href="http://coolfireWang.github.io/2016/09/20/helloNode.html"/>
    <id>http://coolfireWang.github.io/2016/09/20/helloNode.html</id>
    <published>2016-09-20T02:19:08.000Z</published>
    <updated>2016-09-20T02:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nodejs&quot;&gt;&lt;a href=&quot;#nodejs&quot; class=&quot;headerlink&quot; title=&quot;nodejs&quot;&gt;&lt;/a&gt;nodejs&lt;/h3&gt;
    
    </summary>
    
      <category term="nodejs学习系列" scheme="http://coolfireWang.github.io/categories/nodejs%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="nodejs" scheme="http://coolfireWang.github.io/tags/nodejs/"/>
    
      <category term="webpack" scheme="http://coolfireWang.github.io/tags/webpack/"/>
    
      <category term="sailsjs" scheme="http://coolfireWang.github.io/tags/sailsjs/"/>
    
      <category term="express" scheme="http://coolfireWang.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript 之==和===</title>
    <link href="http://coolfireWang.github.io/2016/09/19/dataComp.html"/>
    <id>http://coolfireWang.github.io/2016/09/19/dataComp.html</id>
    <published>2016-09-19T03:09:56.000Z</published>
    <updated>2016-09-19T03:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="之前详细阐述了数据类型-现在我们来说一说数据比较中比较容易忽视的-和-的区别："><a href="#之前详细阐述了数据类型-现在我们来说一说数据比较中比较容易忽视的-和-的区别：" class="headerlink" title="之前详细阐述了数据类型 现在我们来说一说数据比较中比较容易忽视的== 和===的区别："></a>之前详细阐述了数据类型 现在我们来说一说数据比较中比较容易忽视的== 和===的区别：</h5><h5 id="JavaScript-提供三种不同的比较操作符："><a href="#JavaScript-提供三种不同的比较操作符：" class="headerlink" title="JavaScript 提供三种不同的比较操作符："></a>JavaScript 提供三种不同的比较操作符：</h5><blockquote>
<p> 严格相等，使用 ===<br>  （非严格）相等，使用 ==<br>  以及 Object.is （ECMAScript 6 新特性）<br>  ES2015标准提供以下四种比较操作符：</p>
<p>（非严格）相等 (==)<br>  严格相等 (===): 用于Array.prototype.indexOf, Array.prototype.lastIndexOf, 以及 case语句的匹配操作<br>  零值相等: 用于TypedArray和ArrayBuffer的构造、Map和Set操作, 并将用于ES2016标准中的String.prototype.includes<br>  同值相等: 用于所有其他场景</p>
</blockquote>
<ul>
<li>== (equality) 等同，=== (identity )恒等</li>
<li>==， 两边值类型不同的时候，要先进行类型转换，再比较。</li>
<li>===，不做类型转换，类型不同的一定不等。</li>
<li>==和===返回的是一个布尔值（true | false）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str=<span class="string">"123"</span>;</div><div class="line">var num=123;</div><div class="line">console.log(str==num);//<span class="literal">true</span></div><div class="line">console.log(str===num);//<span class="literal">false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>有一个特殊的值，它连自己都不等于自己，console.log(NaN===NaN)不管是==还是===，返回的都是false</p>
</blockquote>
<h5 id="详解"><a href="#详解" class="headerlink" title="==详解"></a>==详解</h5><ul>
<li>== 在判断的时候对数值做了 “隐式转换”, 比如 0 ==false ,1 ==true</li>
</ul>
<ul>
<li>如果两个值类型相同，进行 === 比较。 </li>
<li>如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较： </li>
<li>如果一个是null、一个是undefined，那么[相等]。 </li>
<li>如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。 </li>
<li>如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。 </li>
<li>如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。非js核心的对象，令说（比较麻 烦，我也不大懂） </li>
<li>任何其他组合，都[不相等]。 </li>
</ul>
<h5 id="详解-1"><a href="#详解-1" class="headerlink" title="===详解"></a>===详解</h5><ul>
<li>如果类型不同，就[不相等] </li>
<li>如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断） </li>
<li>如果两个都是字符串，每个位置的字符都一样，那么[相等]；否则[不相等]。 </li>
<li>如果两个值都是true，或者都是false，那么[相等]。 </li>
<li>如果两个值都引用同一个对象或函数，那么[相等]；否则[不相等]。 </li>
<li>如果两个值都是null，或者都是undefined，那么[相等]。 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;之前详细阐述了数据类型-现在我们来说一说数据比较中比较容易忽视的-和-的区别：&quot;&gt;&lt;a href=&quot;#之前详细阐述了数据类型-现在我们来说一说数据比较中比较容易忽视的-和-的区别：&quot; class=&quot;headerlink&quot; title=&quot;之前详细阐述了数据类型 现在
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://coolfireWang.github.io/2016/09/15/hello-world.html"/>
    <id>http://coolfireWang.github.io/2016/09/15/hello-world.html</id>
    <published>2016-09-15T12:25:02.000Z</published>
    <updated>2016-09-15T12:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h3 id="Hexo-常见问题解决方案"><a href="#Hexo-常见问题解决方案" class="headerlink" title="Hexo 常见问题解决方案"></a>Hexo 常见问题解决方案</h3><p><a href="https://xuanwo.org/2014/08/14/hexo-usual-problem/" target="_blank" rel="external">常见问题解决方案</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之数据类型</title>
    <link href="http://coolfireWang.github.io/2016/09/14/datatype.html"/>
    <id>http://coolfireWang.github.io/2016/09/14/datatype.html</id>
    <published>2016-09-14T04:54:56.000Z</published>
    <updated>2016-09-14T04:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-数据类型"><a href="#javascript-数据类型" class="headerlink" title="javascript 数据类型"></a>javascript 数据类型</h1><blockquote>
<p> <strong>ECMA-262 这么定义的</strong><br>   An ECMAScript language type corresponds to values that are directly manipulated by an ECMAScript programmer using the ECMAScript language. The ECMAScript language types are <strong>Undefined</strong>, <strong>Null</strong>,<strong> Boolean</strong>, <strong>String</strong>, <strong>Number</strong>, and <strong>Object</strong>.<br><br><br>ECMAScript 中有5种简单的数据类型行（也称基本数据类型）Undefined 、Null、Boolean、Number和String ,还有一种复杂的数据类型–Object,<br>  Object本质上市由一组无序的键值对组成的，ECMAScript 不支持任何创建之定义类型的机制，所有的值都将是上述的6种类型之一。你会觉得好像6中数据类型不足以表示所有数据。其实不然，由于ECMAScrip是弱类型语言 数据类型具有动态性，所以就没有定义其他类型的必要了。</p>
</blockquote>
<h3 id="既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢"><a href="#既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢" class="headerlink" title="既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢?"></a>既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢?</h3><p>  ECMAScript 给了我们一种手段来检测给定变量的数据类型<strong>typeof</strong>对一个值使用typeof操作符可能返回下列某个字符串：</p>
<ul>
<li>“underfined” —-如果这个值未被定义</li>
<li>“boolean”—-如果这个值是布尔值</li>
<li>“string” —-如果这个值是字符串</li>
<li>“number” —-如果这个值为数值</li>
<li>“object”—-如果这个值对象是null</li>
<li>“function” —-如果这个值是函数</li>
</ul>
<h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  msg=<span class="string">"test"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> msg); <span class="comment">//"string"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(msg)); <span class="comment">//"string"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">21</span>); <span class="comment">//"number"</span></div></pre></td></tr></table></figure>
<ul>
<li>注 typeof 是操作符 不是函数尽管带（）可以使用 但不是必须的也不推荐这么用</li>
<li>虽然function 在ECMAScript中是对象 不是一种数据类型但函数也有一些特殊的属性，因此通过typeof 操作符来区分函数和其他对象是有必要的</li>
</ul>
<h4 id="第七种数据类型–符号-Symbols"><a href="#第七种数据类型–符号-Symbols" class="headerlink" title="第七种数据类型–符号(Symbols)"></a>第七种数据类型–符号(Symbols)</h4><blockquote>
<p>自1997年 JavaScript 发明以来，一直只有六种数据类型，在 ES6 中，出现了第七种数据类型：符号(Symbols)。<br>参考博文：<a href="https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/" target="_blank" rel="external">ES6 In Depth:SymbolsMDN</a>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="external">Symbol</a>。<br>symbol是程序创建并且可以用作属性键的值，并且它能避免命名冲突的风险。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mySymbol = <span class="built_in">Symbol</span>();</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>调用Symbol()创建一个新的 symbol，它的值与其它任何值皆不相等。</li>
<li>字符串或数字可以作为属性的键，symbol 也可以，它不等同于任何字符串，因而这个以 symbol 为键的属性可以保证不与任何其它属性产生冲突。<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var sy<span class="name">m1</span> = Symbol<span class="comment">("foo")</span>;</div><div class="line">var sy<span class="name">m2</span> = Symbol<span class="comment">("foo")</span>;</div><div class="line">sy<span class="name">m1</span> === sy<span class="name">m2</span>; <span class="comment">// false</span></div><div class="line">var obj=&#123;&#125;;</div><div class="line"><span class="comment">//绝对不会冲突</span></div><div class="line">obj[sy<span class="name">m1</span>]=<span class="string">"sym1"</span>;</div><div class="line">obj[sy<span class="name">m2</span>]=<span class="string">"sym2"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>到底什么是symbol？<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() === <span class="string">"symbol"</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="string">"symbol"</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">"symbol"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>确切地说，symbol 与其它类型并不完全相像。</p>
<p>symbol 被创建后就不可变更，你不能为它设置属性（在严格模式下尝试设置属性会得到 TypeError 的错误）。他们可以用作属性名称，这些性质与字符串类似。</p>
<p>另一方面，每一个 symbol 都独一无二，不与其它 symbol 等同，即使二者有相同的描述也不相等；你可以轻松地创建一个新的 symbol。这些性质与对象类似。</p>
<p>ES6 中的 symbol 与 Lisp 和 Ruby 这些语言中更传统的 symbol 类似，但不像它们集成得那么紧密。在 Lisp 中，所有的标识符都是 symbol；在 JavaScript 中，标识符和大多数的属性键仍然是字符串，symbol 只是一个额外的选项。</p>
<p>关于 symbol 的忠告：symbol 不能被自动转换为字符串，这和语言中的其它类型不同。尝试拼接 symbol 与字符串将得到 TypeError 错误。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> sym = Symbol(<span class="string">"&amp;lt;3"</span>);</div><div class="line"><span class="string">"your symbol is "</span> + sym</div><div class="line">// TypeError: can't <span class="built_in">convert</span> symbol to <span class="built_in">string</span></div><div class="line">your symbol <span class="built_in">is</span> $&#123;sym&#125;</div><div class="line">// TypeError: can't <span class="built_in">convert</span> symbol to <span class="built_in">string</span></div></pre></td></tr></table></figure></p>
<p>通过String(sym)或sym.toString()可以显示地将symbol转换为一个字符串，从而回避这个问题。</p>
</blockquote>
<h4 id="获取Symbol的三种方式"><a href="#获取Symbol的三种方式" class="headerlink" title="获取Symbol的三种方式"></a>获取Symbol的三种方式</h4><ul>
<li>调用Symbol()。正如我们上文中所讨论的，这种方式每次调用都会返回一个新的唯一symbol。</li>
<li>调用Symbol.for(string)。这种方式会访问 symbol 注册表，其中存储了已经存在的一系列 symbol。这种方式与通过Symbol()定义的独立 symbol 不同，symbol 注册表中的 symbol 是共享的。如果你连续三十次调用Symbol.for(“cat”)，每次都会返回相同的 symbol。注册表非常有用，在多个 web 页面或同一个 web 页面的多个模块中经常需要共享一个 symbol。</li>
<li><p>使用标准定义的 symbol，例如：Symbol.iterator。标准根据一些特殊用途定义了少许的几个 symbol。</p>
<h4 id="symbol-在-ES6-规范中的应用"><a href="#symbol-在-ES6-规范中的应用" class="headerlink" title="symbol 在 ES6 规范中的应用"></a>symbol 在 ES6 规范中的应用</h4><p>ES6 中还有其它几处使用了symbol 的地方。（这些特性在Firefox里尚未实现。）</p>
</li>
<li><p>使instanceof可扩展。在 ES6 中，表达式object instanceof constructor被指定为构造函数的一个方法：constructor<a href="object">Symbol.hasInstance</a>。这意味着它是可扩展的。</p>
</li>
<li>消除新特性和旧代码之间的冲突。这一点非常复杂，但是我们发现，添加某些 ES6数组方法会破坏现有的Web网站。其它 Web 标准有相同的问题：向浏览器中添加新方法会破坏原有的网站。然而，破坏问题主要由动态作用域引起，所以 ES6 引入一个特殊的symbol——Symbol.unscopables，Web 标准可以用这个 symbol 来阻止某些方法别加入到动态作用域中。</li>
<li>支持新的字符串匹配类型。在 ES5 中，str.match(myObject)会尝试将myObject转换为正则表达式对象（RegExp）。在 ES6 中，它会首先检查myObject是否有一个myObject<a href="str">Symbol.match</a>方法。现在的库可以提供自定义的字符串解析类，所有支持RegExp</li>
</ul>
<hr>
<blockquote>
<p>symbol 在 Firefox 36 和 Chrome 38 中均已被实现，为了支持那些尚未支持原生 ES6 symbol 的浏览器，你可以使用一个 polyfill，例如 core.js。因为 symbol 与其它类型不尽相同，所以 polyfill 目前不是很完美，请阅读<a href="https://github.com/zloirock/core-js#caveats-when-using-symbol-polyfill" target="_blank" rel="external">注意事项</a>。</p>
</blockquote>
<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>   因为js 是弱类型语言 </p>
<ul>
<li><p>JS中变量申明分显式申明和隐式申明。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var i=<span class="number">100</span>;<span class="comment">//显式申明</span></div><div class="line">　　i=<span class="number">100</span>;<span class="comment">//隐式申明</span></div></pre></td></tr></table></figure>
</li>
<li><p>ES6块级作用域及新变量声明（let）</p>
<blockquote>
<p>很多语言中都有块级作用域，但JS没有，它使用var声明变量，以function来划分作用域，大括号“{}” 却限定不了var的作用域。用var声明的变量具有变量提升（declaration hoisting）的效果。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>ES6里增加了一个let，可以在{}， if， for里声明。用法同var，但作用域限定在块级，let声明的变量不存在变量提升。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript-数据类型&quot;&gt;&lt;a href=&quot;#javascript-数据类型&quot; class=&quot;headerlink&quot; title=&quot;javascript 数据类型&quot;&gt;&lt;/a&gt;javascript 数据类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;str
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 正则</title>
    <link href="http://coolfireWang.github.io/2016/09/12/regex.html"/>
    <id>http://coolfireWang.github.io/2016/09/12/regex.html</id>
    <published>2016-09-12T07:11:02.000Z</published>
    <updated>2016-09-12T07:11:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="正则表达式" scheme="http://coolfireWang.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 定时器</title>
    <link href="http://coolfireWang.github.io/2016/09/12/timer.html"/>
    <id>http://coolfireWang.github.io/2016/09/12/timer.html</id>
    <published>2016-09-12T07:11:02.000Z</published>
    <updated>2016-09-12T07:11:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="定时器" scheme="http://coolfireWang.github.io/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 设计模式</title>
    <link href="http://coolfireWang.github.io/2016/09/12/designPattern.html"/>
    <id>http://coolfireWang.github.io/2016/09/12/designPattern.html</id>
    <published>2016-09-12T07:01:22.000Z</published>
    <updated>2016-09-12T07:01:22.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://coolfireWang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 函数回调</title>
    <link href="http://coolfireWang.github.io/2016/09/12/callbcak.html"/>
    <id>http://coolfireWang.github.io/2016/09/12/callbcak.html</id>
    <published>2016-09-12T07:01:22.000Z</published>
    <updated>2016-09-12T07:01:22.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="函数回调" scheme="http://coolfireWang.github.io/tags/%E5%87%BD%E6%95%B0%E5%9B%9E%E8%B0%83/"/>
    
  </entry>
  
</feed>
