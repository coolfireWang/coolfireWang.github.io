<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demain&#39;s Page</title>
  <subtitle>身体和心灵必须有一个在路上！</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://coolfireWang.github.io/"/>
  <updated>2016-09-12T07:11:01.718Z</updated>
  <id>http://coolfireWang.github.io/</id>
  
  <author>
    <name>Demain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>彻底理解javascript之 正则</title>
    <link href="http://coolfireWang.github.io/2016-09-12-regex.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-regex.html</id>
    <published>2016-09-12T07:09:55.179Z</published>
    <updated>2016-09-12T07:11:01.718Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="正则表达式" scheme="http://coolfireWang.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 定时器</title>
    <link href="http://coolfireWang.github.io/2016-09-12-timer.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-timer.html</id>
    <published>2016-09-12T07:08:38.814Z</published>
    <updated>2016-09-12T07:11:01.750Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="定时器" scheme="http://coolfireWang.github.io/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>我的简历</title>
    <link href="http://coolfireWang.github.io/2016-09-12-curriculumVitae.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-curriculumVitae.html</id>
    <published>2016-09-12T06:57:40.703Z</published>
    <updated>2016-09-12T07:01:21.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Demain’s简历"><a href="#Demain’s简历" class="headerlink" title="Demain’s简历"></a><p align="center">Demain’s简历</p></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Demain’s简历&quot;&gt;&lt;a href=&quot;#Demain’s简历&quot; class=&quot;headerlink&quot; title=&quot;Demain’s简历&quot;&gt;&lt;/a&gt;&lt;p align=&quot;center&quot;&gt;Demain’s简历&lt;/p&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="其他" scheme="http://coolfireWang.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="前端工程师" scheme="http://coolfireWang.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
      <category term="html5,css3,js" scheme="http://coolfireWang.github.io/tags/html5-css3-js/"/>
    
      <category term="nodejs" scheme="http://coolfireWang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 跨域</title>
    <link href="http://coolfireWang.github.io/2016-09-12-cross-domain.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-cross-domain.html</id>
    <published>2016-09-12T06:55:21.410Z</published>
    <updated>2016-09-12T07:01:21.093Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="跨域" scheme="http://coolfireWang.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 垃圾回收</title>
    <link href="http://coolfireWang.github.io/2016-09-12-gc.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-gc.html</id>
    <published>2016-09-12T06:53:41.324Z</published>
    <updated>2016-09-12T07:01:21.154Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="垃圾回收" scheme="http://coolfireWang.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 函数回调</title>
    <link href="http://coolfireWang.github.io/2016-09-12-callbcak.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-callbcak.html</id>
    <published>2016-09-12T06:52:35.263Z</published>
    <updated>2016-09-12T07:01:21.123Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="函数回调" scheme="http://coolfireWang.github.io/tags/%E5%87%BD%E6%95%B0%E5%9B%9E%E8%B0%83/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 设计模式</title>
    <link href="http://coolfireWang.github.io/2016-09-12-designPattern.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-designPattern.html</id>
    <published>2016-09-12T06:51:42.048Z</published>
    <updated>2016-09-12T07:01:21.061Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://coolfireWang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 同步和异步</title>
    <link href="http://coolfireWang.github.io/2016-09-12-syncAndAsync.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-syncAndAsync.html</id>
    <published>2016-09-12T06:31:41.897Z</published>
    <updated>2016-09-12T06:42:12.835Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="同步&amp;异步" scheme="http://coolfireWang.github.io/tags/%E5%90%8C%E6%AD%A5-%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 作用域&amp;作用域链</title>
    <link href="http://coolfireWang.github.io/2016-09-12-actionScope.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-actionScope.html</id>
    <published>2016-09-12T06:29:43.145Z</published>
    <updated>2016-09-12T06:47:27.927Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="作用域&amp;作用域链" scheme="http://coolfireWang.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 事件&amp;循环</title>
    <link href="http://coolfireWang.github.io/2016-09-12-eventsLoop.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-eventsLoop.html</id>
    <published>2016-09-12T06:28:12.731Z</published>
    <updated>2016-09-12T06:47:27.896Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
      <category term="事件" scheme="http://coolfireWang.github.io/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 继承</title>
    <link href="http://coolfireWang.github.io/2016-09-12-extend.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-extend.html</id>
    <published>2016-09-12T06:24:32.923Z</published>
    <updated>2016-09-12T06:32:34.082Z</updated>
    
    <content type="html"><![CDATA[<p>javascript的概念</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript的概念&lt;/p&gt;

    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之 闭包</title>
    <link href="http://coolfireWang.github.io/2016-09-12-closure.html"/>
    <id>http://coolfireWang.github.io/2016-09-12-closure.html</id>
    <published>2016-09-12T06:15:03.681Z</published>
    <updated>2016-09-12T06:32:32.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包&quot;&gt;&lt;/a&gt;什么是闭包&lt;/h2&gt;
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>马哥专属</title>
    <link href="http://coolfireWang.github.io/2016-09-07-test.html"/>
    <id>http://coolfireWang.github.io/2016-09-07-test.html</id>
    <published>2016-09-07T14:05:41.433Z</published>
    <updated>2016-09-08T05:16:31.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h1> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">马哥专属地盘，每日更新</div></pre></td></tr></table></figure>
<ul>
<li>You are the greatest refreshment in my life;<br><img src="/images/love0.jpg" alt="Alt text"></li>
</ul>
<hr>
<ul>
<li><p>No matter the ending is perfect or not, you cannot disappear from my world.<br><img src="/images/love1.jpg" alt="Alt text"></p>
</li>
<li><p>If equal affection cannot be, let the more loving be me.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一篇&quot;&gt;&lt;a href=&quot;#第一篇&quot; class=&quot;headerlink&quot; title=&quot;第一篇&quot;&gt;&lt;/a&gt;第一篇&lt;/h1&gt; &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
    
    </summary>
    
      <category term="马哥专属" scheme="http://coolfireWang.github.io/categories/%E9%A9%AC%E5%93%A5%E4%B8%93%E5%B1%9E/"/>
    
    
      <category term="马哥专属" scheme="http://coolfireWang.github.io/tags/%E9%A9%AC%E5%93%A5%E4%B8%93%E5%B1%9E/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="http://coolfireWang.github.io/2016-08-24-why-do-it.html"/>
    <id>http://coolfireWang.github.io/2016-08-24-why-do-it.html</id>
    <published>2016-08-24T15:10:42.941Z</published>
    <updated>2016-08-09T15:59:16.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么写"><a href="#为什么写" class="headerlink" title="为什么写"></a>为什么写</h1><p> 其实有写博客的想法已经很久很久了，可是我这人有拖延症，搭了很多次博客都没写过，博客园，csdn,oschina…等，一直想便一边学一边总结和实践。<br> 所谓万事开头难，今天就从这里开始</p>
<h1 id="写什么"><a href="#写什么" class="headerlink" title="写什么"></a>写什么</h1><p> 写什么呢？作为一个coder 肯定是些技术相关的文章了，而作为一个Front-End<br> 当然是写一下javascipt ,html(5)，css(3)，浏览器存储，缓存，优化，ajax,mvc,mvvm各种库等相关的技术了，<br> 当然了我也会关注些full-stack,nodejs,React,angularjs,浏览器兼容技术，<br> 主流的UI ,架构解决方案等<br> 至于工具什么当然不能缺少了。。。。<br> 总之技术太多更新太快，万丈高楼平地起，当然是重最基础的开始了。<br> let’s do it!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么写&quot;&gt;&lt;a href=&quot;#为什么写&quot; class=&quot;headerlink&quot; title=&quot;为什么写&quot;&gt;&lt;/a&gt;为什么写&lt;/h1&gt;&lt;p&gt; 其实有写博客的想法已经很久很久了，可是我这人有拖延症，搭了很多次博客都没写过，博客园，csdn,oschina…等，一直想
    
    </summary>
    
      <category term="札记" scheme="http://coolfireWang.github.io/categories/%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="杂谈" scheme="http://coolfireWang.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://coolfireWang.github.io/2016-08-24-hello-world.html"/>
    <id>http://coolfireWang.github.io/2016-08-24-hello-world.html</id>
    <published>2016-08-24T15:10:42.932Z</published>
    <updated>2016-07-24T14:02:09.125Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端工程师该具备怎样的技能呢</title>
    <link href="http://coolfireWang.github.io/2016-08-24-front-end.html"/>
    <id>http://coolfireWang.github.io/2016-08-24-front-end.html</id>
    <published>2016-08-24T15:10:42.929Z</published>
    <updated>2016-09-07T15:29:20.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个合格的前端工程师应该具备怎样的能力？"><a href="#一个合格的前端工程师应该具备怎样的能力？" class="headerlink" title="一个合格的前端工程师应该具备怎样的能力？"></a>一个合格的前端工程师应该具备怎样的能力？</h2><p> 首先你要知道什么是前端。<br> 前端工程师的英文名为front-end engineer，简称FE<br> 前端都干些什么呢？无非是三大块：html / css / js，但如果就这样，那前端也不过如此，<br> 现在意义上的前端（并非只制作网页）<br> 2011年之前，FE的工作基本都是由服务端工程师包办的，或者是由设计师来产出HTML页面。</p>
<h3 id="用户体验的把控者"><a href="#用户体验的把控者" class="headerlink" title="用户体验的把控者"></a>用户体验的把控者</h3><p> 前端工程师的主要的工作就是开发用户界面，在web系统中，就是指网页了。为什么网页需要专门的FE来写呢？答案就是为了「用户体验」。<br> 从web2.0概念的普及到web3.0的提出，用户成为互联网的主要生产者，网页所承载的功能愈加丰富多样。<br> <br><br> 首先是企业的需求：如果你的网站、app等界面做的很丑的话，我相信大众是不能接受的开发者也作为第一个使用者估计都看不过去。<br> 其次是用户的需求：现在的用户也都很挑剔。毕竟他们使用的产品各个都要么炫酷要么清爽，都被惯坏了，你的产品稍有点不爽的地方，“影响我心情不爽给你个差评”，要么就直接卸载这样你的用户就这么流失了，你的产品的价值就没了。<br> 想做出漂亮的界面你必须熟练布局 html css （h5 、css3），主流的布局风格，UI框架,响应式，浏览器兼容等<br> 随着HTML5的支持度越来越高，前端拥有的能力也会越强。比如利用canvas能够获取到图片上的每一个像素点，这样前端就拥有了图像处理能力。有了FileReader API，前端拥有了本地文件的读取能力，本地数据库，还有地理位置获取等等</p>
<h3 id="用户习惯的引导者"><a href="#用户习惯的引导者" class="headerlink" title="用户习惯的引导者"></a>用户习惯的引导者</h3><p> 用户界面的设计，操作方式，交互习惯等都由你的逻辑代码来控制，所以作为FE你不仅要写出漂亮的界面，还要编写程序去处理控制业务逻辑<br> 以前呢，用户端就是个IE浏览器，没有什么业务逻辑可言。但现在不同了，用户使用浏览器发表文章、进行社交活动，更复杂的能使用在线工具完成工作等。<br> javascript就是FE需要掌握的编程语言，他应该通晓这门语言的优势和缺点，掌握各种编程思想、开发模式。利用各种技巧实现交互越来越丰富的界面，<br> 同时还要与服务端的工程师沟通，调试接口，完成：页面展示——响应用户操作——提交用户数据——反馈操作结果这一系列流程</p>
<h4 id="有图有真相先看一张技能图"><a href="#有图有真相先看一张技能图" class="headerlink" title="有图有真相先看一张技能图"></a>有图有真相先看一张技能图</h4><p><img src="/images/fetecnl.jpg" alt="Alt text" title="Optional title"></p>
<p><strong>以上属于个人观点和看法</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个合格的前端工程师应该具备怎样的能力？&quot;&gt;&lt;a href=&quot;#一个合格的前端工程师应该具备怎样的能力？&quot; class=&quot;headerlink&quot; title=&quot;一个合格的前端工程师应该具备怎样的能力？&quot;&gt;&lt;/a&gt;一个合格的前端工程师应该具备怎样的能力？&lt;/h2&gt;&lt;
    
    </summary>
    
    
      <category term="随想" scheme="http://coolfireWang.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之数据类型</title>
    <link href="http://coolfireWang.github.io/2016-08-24-datatype.html"/>
    <id>http://coolfireWang.github.io/2016-08-24-datatype.html</id>
    <published>2016-08-24T15:10:42.927Z</published>
    <updated>2016-09-14T02:09:33.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-数据类型"><a href="#javascript-数据类型" class="headerlink" title="javascript 数据类型"></a>javascript 数据类型</h1><blockquote>
<p> <strong>ECMA-262 这么定义的</strong><br>   An ECMAScript language type corresponds to values that are directly manipulated by an ECMAScript programmer using the ECMAScript language. The ECMAScript language types are <strong>Undefined</strong>, <strong>Null</strong>,<strong> Boolean</strong>, <strong>String</strong>, <strong>Number</strong>, and <strong>Object</strong>.<br><br><br>ECMAScript 中有5种简单的数据类型行（也称基本数据类型）Undefined 、Null、Boolean、Number和String ,还有一种复杂的数据类型–Object,<br>  Object本质上市由一组无序的键值对组成的，ECMAScript 不支持任何创建之定义类型的机制，所有的值都将是上述的6种类型之一。你会觉得好像6中数据类型不足以表示所有数据。其实不然，由于ECMAScrip是弱类型语言 数据类型具有动态性，所以就没有定义其他类型的必要了。</p>
</blockquote>
<h3 id="既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢"><a href="#既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢" class="headerlink" title="既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢?"></a>既然是弱类型语言，数据类型是动态变化的，那么应该怎样判断当前数据的类型呢?</h3><p>  ECMAScript 给了我们一种手段来检测给定变量的数据类型<strong>typeof</strong>对一个值使用typeof操作符可能返回下列某个字符串：</p>
<ul>
<li>“underfined” —-如果这个值未被定义</li>
<li>“boolean”—-如果这个值是布尔值</li>
<li>“string” —-如果这个值是字符串</li>
<li>“number” —-如果这个值为数值</li>
<li>“object”—-如果这个值对象是null</li>
<li>“function” —-如果这个值是函数</li>
</ul>
<h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  msg=<span class="string">"test"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> msg); <span class="comment">//"string"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(msg)); <span class="comment">//"string"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">21</span>); <span class="comment">//"number"</span></div></pre></td></tr></table></figure>
<ul>
<li>注 typeof 是操作符 不是函数尽管带（）可以使用 但不是必须的也不推荐这么用</li>
<li>虽然function 在ECMAScript中是对象 不是一种数据类型但函数也有一些特殊的属性，因此通过typeof 操作符来区分函数和其他对象是有必要的</li>
</ul>
<h4 id="第七种数据类型–符号-Symbols"><a href="#第七种数据类型–符号-Symbols" class="headerlink" title="第七种数据类型–符号(Symbols)"></a>第七种数据类型–符号(Symbols)</h4><blockquote>
<p>自1997年 JavaScript 发明以来，一直只有六种数据类型，在 ES6 中，出现了第七种数据类型：符号(Symbols)。<br>参考博文：<a href="https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/" target="_blank" rel="external">ES6 In Depth:SymbolsMDN</a>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="external">Symbol</a>。<br>symbol是程序创建并且可以用作属性键的值，并且它能避免命名冲突的风险。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mySymbol = <span class="built_in">Symbol</span>();</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>调用Symbol()创建一个新的 symbol，它的值与其它任何值皆不相等。</li>
<li>字符串或数字可以作为属性的键，symbol 也可以，它不等同于任何字符串，因而这个以 symbol 为键的属性可以保证不与任何其它属性产生冲突。<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var sy<span class="name">m1</span> = Symbol<span class="comment">("foo")</span>;</div><div class="line">var sy<span class="name">m2</span> = Symbol<span class="comment">("foo")</span>;</div><div class="line">sy<span class="name">m1</span> === sy<span class="name">m2</span>; <span class="comment">// false</span></div><div class="line">var obj=&#123;&#125;;</div><div class="line"><span class="comment">//绝对不会冲突</span></div><div class="line">obj[sy<span class="name">m1</span>]=<span class="string">"sym1"</span>;</div><div class="line">obj[sy<span class="name">m2</span>]=<span class="string">"sym2"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>到底什么是symbol？<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() === <span class="string">"symbol"</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="string">"symbol"</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">"symbol"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>确切地说，symbol 与其它类型并不完全相像。</p>
<p>symbol 被创建后就不可变更，你不能为它设置属性（在严格模式下尝试设置属性会得到 TypeError 的错误）。他们可以用作属性名称，这些性质与字符串类似。</p>
<p>另一方面，每一个 symbol 都独一无二，不与其它 symbol 等同，即使二者有相同的描述也不相等；你可以轻松地创建一个新的 symbol。这些性质与对象类似。</p>
<p>ES6 中的 symbol 与 Lisp 和 Ruby 这些语言中更传统的 symbol 类似，但不像它们集成得那么紧密。在 Lisp 中，所有的标识符都是 symbol；在 JavaScript 中，标识符和大多数的属性键仍然是字符串，symbol 只是一个额外的选项。</p>
<p>关于 symbol 的忠告：symbol 不能被自动转换为字符串，这和语言中的其它类型不同。尝试拼接 symbol 与字符串将得到 TypeError 错误。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> sym = Symbol(<span class="string">"&amp;lt;3"</span>);</div><div class="line"><span class="string">"your symbol is "</span> + sym</div><div class="line">// TypeError: can't <span class="built_in">convert</span> symbol to <span class="built_in">string</span></div><div class="line">your symbol <span class="built_in">is</span> $&#123;sym&#125;</div><div class="line">// TypeError: can't <span class="built_in">convert</span> symbol to <span class="built_in">string</span></div></pre></td></tr></table></figure></p>
<p>通过String(sym)或sym.toString()可以显示地将symbol转换为一个字符串，从而回避这个问题。</p>
</blockquote>
<h4 id="获取Symbol的三种方式"><a href="#获取Symbol的三种方式" class="headerlink" title="获取Symbol的三种方式"></a>获取Symbol的三种方式</h4><ul>
<li>调用Symbol()。正如我们上文中所讨论的，这种方式每次调用都会返回一个新的唯一symbol。</li>
<li>调用Symbol.for(string)。这种方式会访问 symbol 注册表，其中存储了已经存在的一系列 symbol。这种方式与通过Symbol()定义的独立 symbol 不同，symbol 注册表中的 symbol 是共享的。如果你连续三十次调用Symbol.for(“cat”)，每次都会返回相同的 symbol。注册表非常有用，在多个 web 页面或同一个 web 页面的多个模块中经常需要共享一个 symbol。</li>
<li><p>使用标准定义的 symbol，例如：Symbol.iterator。标准根据一些特殊用途定义了少许的几个 symbol。</p>
<h4 id="symbol-在-ES6-规范中的应用"><a href="#symbol-在-ES6-规范中的应用" class="headerlink" title="symbol 在 ES6 规范中的应用"></a>symbol 在 ES6 规范中的应用</h4><p>ES6 中还有其它几处使用了symbol 的地方。（这些特性在Firefox里尚未实现。）</p>
</li>
<li><p>使instanceof可扩展。在 ES6 中，表达式object instanceof constructor被指定为构造函数的一个方法：constructor<a href="object">Symbol.hasInstance</a>。这意味着它是可扩展的。</p>
</li>
<li>消除新特性和旧代码之间的冲突。这一点非常复杂，但是我们发现，添加某些 ES6数组方法会破坏现有的Web网站。其它 Web 标准有相同的问题：向浏览器中添加新方法会破坏原有的网站。然而，破坏问题主要由动态作用域引起，所以 ES6 引入一个特殊的symbol——Symbol.unscopables，Web 标准可以用这个 symbol 来阻止某些方法别加入到动态作用域中。</li>
<li>支持新的字符串匹配类型。在 ES5 中，str.match(myObject)会尝试将myObject转换为正则表达式对象（RegExp）。在 ES6 中，它会首先检查myObject是否有一个myObject<a href="str">Symbol.match</a>方法。现在的库可以提供自定义的字符串解析类，所有支持RegExp</li>
</ul>
<hr>
<blockquote>
<p>symbol 在 Firefox 36 和 Chrome 38 中均已被实现，为了支持那些尚未支持原生 ES6 symbol 的浏览器，你可以使用一个 polyfill，例如 core.js。因为 symbol 与其它类型不尽相同，所以 polyfill 目前不是很完美，请阅读注意事项。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript-数据类型&quot;&gt;&lt;a href=&quot;#javascript-数据类型&quot; class=&quot;headerlink&quot; title=&quot;javascript 数据类型&quot;&gt;&lt;/a&gt;javascript 数据类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;str
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript 之==和===</title>
    <link href="http://coolfireWang.github.io/2016-08-24-dataComp.html"/>
    <id>http://coolfireWang.github.io/2016-08-24-dataComp.html</id>
    <published>2016-08-24T15:10:42.925Z</published>
    <updated>2016-09-07T15:00:51.711Z</updated>
    
    <content type="html"><![CDATA[<p>#####之前详细阐述了数据类型 现在我们来说一说数据比较中比较容易忽视的== 和===的区别：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#####之前详细阐述了数据类型 现在我们来说一说数据比较中比较容易忽视的== 和===的区别：&lt;/p&gt;

    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解javascript之数组和对象</title>
    <link href="http://coolfireWang.github.io/2016-08-24-arrayObj.html"/>
    <id>http://coolfireWang.github.io/2016-08-24-arrayObj.html</id>
    <published>2016-08-24T15:10:42.922Z</published>
    <updated>2016-09-07T15:28:09.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组-array"><a href="#数组-array" class="headerlink" title="数组(array)"></a>数组(array)</h1><h1 id="对象（object）"><a href="#对象（object）" class="headerlink" title="对象（object）"></a>对象（object）</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组-array&quot;&gt;&lt;a href=&quot;#数组-array&quot; class=&quot;headerlink&quot; title=&quot;数组(array)&quot;&gt;&lt;/a&gt;数组(array)&lt;/h1&gt;&lt;h1 id=&quot;对象（object）&quot;&gt;&lt;a href=&quot;#对象（object）&quot; class
    
    </summary>
    
      <category term="彻底理解javascript系列" scheme="http://coolfireWang.github.io/categories/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3javascript%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coolfireWang.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
